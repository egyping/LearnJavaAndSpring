Front end calls >> API
Controller <> Service <> Repository
inside the controller instintiate the service

Controller to Service
controller is a class, you define the service class as a property, now you should instintiate the
service class property to start use it and link it, but this not needed when you use @component
and @Autwired
@Componenet at the service class will make it available for use in one copy and no need to create
copies at other classes , at the other classes for example the controller you can directly inject
the service class property in side the controller class constructor and it will be linked to the
service class

DAO and Interface (Repostiory)
Repo interface is a class which if other clases called it has to implement the method inside
At the service you need to refrence the repo which you will pull the data from
at service also after pull the data you manupilated it
Repo is a class where represent the source of data it could be data base or single or multiple new
records of data or it could be List\Array
Controller > Service > Interface ProductRepo >> ProductFakeRepo { new records } value = "fake"
                                             >> ProductRepository {Collection.emptyList} value = "real"
Two impls and single repo!! , run the appp will cause error
you have to define @Primary or @Qualifier at the service to prior one over other

@Components is the father of @Service and @Repository
These annotations creats BEANS of the annotated class, bean is replacing the new keyword which we use to
instintiate classes to start use it and operate
In behind spring boot create the beans and keep it ready for use
spring boot @Autowired helps you to inject the classes to each others through constructors

@Bean annotation
it gives you the option to predefine configuration and instruction to spring boot before instintiate the class
usually the class named NameConfiguration
CommandLineRunner class used in Beans to inject any kind of commands or logic while starting
@Configuration is used on top of the class and @Bean on the methods used

How SB serialize and deserialze the json? using Jackson
@JsonProperty("sku_num") to rename the property in the json
@JsonIgnore // to ignore password form showing in the json

Validations
===========
<dependency>
	<groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>

@NotBlank(message = "any message") at the properties class + @Valid at the controller method
@Email to make sure the format is email
javax.validation.constraints has many constraints
@Max the max value
@Min same
@Decimal max min


Exceptions
==========
=> GET 127.0.0.1:8080/api/v1/product/4 and lets say 4 not exist the server will reply 500 and terminal print (java.lang.IllegalStateException: Product not found)
and the client postman get
{
    "timestamp": "2022-11-06T09:32:57.329+00:00",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/api/v1/product/4"
}
(java.lang.IllegalStateException: Product not found) the "Product not found" custom message from the getProduct method in the productService
server.error.include-binding-errors=always
server.error.include-message=always
server.error.include-stacktrace=always
These parameters at the application properties will pipe the IllegalStateException custom message to the Response
=> 127.0.0.1:8080/api/v1/product/4 this giving 500 where it should give 404
to do that we created new class NotFoundException extends RunTimeException and annotated by
@ResponseStatus(value = HttpStatus.NOT_FOUND)
now the reposnse is
{
    "timestamp": "2022-11-06T16:17:18.640+00:00",
    "status": 404,
    "error": "Not Found",
    "message": "Product not found",
    "path": "/api/v1/product/4"
}


Data and JPA
============
H2 is in memory database good for practicing
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
@Entity and @Table annotations to tag the original class
@Id annotation for the id field of the persistence class since its the PK
create empty constructor for the persistence main class
    public Product() {
        }
ProductRepository class should extends JpaRepository to use its features and driver ...etc.
ProductRepository should tagged by @Repository
Reload the project and access H2 from http://127.0.0.1:8080/h2
URL jdbc:h2:mem:testdb




































